Docker Module -- 

Kubernetes -- 

Docker Compose 

GIT - Completed 
	Git Workflow 
		init 
		add
		commit 
		clone
		push
		pull
		fetch 
		diff
		show
		commit with opts 
		reset
		revert 
		
	Git Branching Strategies
		branch
		merge 
		merge conflict 
		with with multiple branches
			merge rebase squash
			
		stash 
		
	Remote Repo.
		github 
	
		remote 

	

Jenkins  --> Not Start!




CI using Jenkins
 
CM using Ansible --


DevOps ::::

	DevOps is a Software Development Strategies which help to promote collaborate between the teams like Development and Operations team,
	to achieve Continous Development, Continous Integration, Continous Testing, Continous Delivery, Continous Deployment, Continous Monitoring in an automated fashion.
	
	Teams: 
	
		DevOps Team 					==> DevOps Asso., Engg., Lead, Architect, Consultant,
			Infra-Provision Team 
			Appln. Development Team 
			Testing Team 
			Release Mgmt Team
			Production Support 
			Production Monitoring 
			Security Team 
			
	
		Infra-Structure --> Provision Team 
			IAC Tools :
				Terraform	==> Used for infra-structure povisioning/Creation 
				Ansible 	==> Configuration Management Tool - Used for Server configurations
	
	DevOps Stages: 
	
	
	
	Continous Development
		IDEs - Eclipse, VSC, GIT 
		
			Coding --
			
			Application Build 	--> 	Process of Compiling the Src_Code and Create Artifacts(Binaries - *.war/*.jar/.dll/*.exec)
			Unit Testing 
			Promote for further testing QA/UAT
			Email Notifications 
			
			Released to Production 
			Monitoring
			
		Using DevOps Approach ::::
				Coding.
				Commit the changes to src_code Repository.
				
			DevOps Automation :
				Application Build 	--> 	Process of Compiling the Src_Code and Create Artifacts(Binaries - *.war/*.jar/.dll/*.exec)
				Unit Testing 
				Promote for further testing QA/UAT
				Email Notifications 
				
				Released to Production 
				Monitoring

			Tools : IDEs - Eclipse, VSC, GIT 
		
		
			
	Continous Integration,
				Tools:	Jenkins, Ansible, Docker, Kubernetes

	
	Continous Testing, 
				Tools: Junit, TestNG, Selenium, Jenkins 
			
	
	Continous Delivery/Deployment :
				Both Continous Delivery/Deployment used to Release the products to Production
					
					Continous Delivery 		==> Requires a Manual Approval for Production Release 
					Continous Deployment 	==> Is Completely Automated - Doesn't requires any Manual Intervension/Approval for Production Release

		Deployment ::::
		
				==> It is a process of copying the artifacts from one environment to another/target environment

			Banking Domain/ INS/ :::
			
				Deployment Window ::: 4Hrs to 6Hrs. (Non-Business Hrs.) Downtime.
					Continous Delivery ==>  Requires Manual approval from all their stakeholders
							Due to some reason, this failed!
									Fix!/Revert!
						
			
			facebook/google/amazon.com :::
				Continous Deployment 	==> Is Completely Automated - Doesn't requires any Manual Intervension/Approval for Prod Release. 
				
				Tools:	Jenkins, Ansible, Docker, Kubernetes
				
						Monolith Applications :
							Tightly coupled -- with lot of dependencies
						Micro-Service Based Application 
			
				E_Commerce portal ::
					www.amazon.com 

			Monolith Applications :
				Tightly coupled -- with lot of dependencies
				Here the deployment happens at the application level.
							
				sign_up			developer1 - code, test ==> Cannot deploy to prod independently.
				sign_in
				Search
				Add to cart
				payment
				confirm order 
				track


			Micro-Service Based Application	
				Loosely coupled -- with out any dependencies
				Here the modules are considered as a service (Micro-Service)
				Here the deployment happens at the sevice level.
							
				sign_up			developer1 - Independently code, test & deploy to prod without impacting others service.
				sign_in
				Search
				Add to cart
				payment
				confirm order 
				track


			
	Continous Monitoring
				Tools:	Jenkins, Prometheus/Grafana
					Infra-Structure Monitoring  - Prometheus/Grafana/datadog/dynatrace
					Application Monitoring 		- AppDynamics
				
				
	Environments :::
	
		Non-Production Environment														Production Environment
		
			Dev Environment
			Build Environment
			Testing Environment
				QA 
				UAT 									=====>								Prod Environment
				
	
	DevOps is all about :::
			People 
			Process 
			Tools 
			
		Telecomm-Domain 
			SP1 ==> Introduce a new offers --> It should release to customers as early as possible 
			SP2 ==> 
			
			
	Tools :::
				Open-Source DevOps Tools 	
				
					git, jenkin, docker, kubernetes, prometheus/ Grafana, Ansible, terraform 
				
				Managed Services - AWS / Azure / GCP 
				
				
	Next Jenkins ::::

			
		Lab ::: 
		
			- AWS Free Tier 
				Launch VMs
			Connect to VMs 
				- EC2 Instance Connect 
				- SSH Agent - To access Remote machines 
					Putty 
					MobaXterm			https://mobaxterm.mobatek.net/download.html
				- Terminals
			- Create GITHub Account 
			- Create dockerhub Account
			- Install Visual Studio Code 
			
			
	
		Jenkins - Is a build Orchestration Tool :
			
			- Master Slave Architecture :::
			
			Jenkins :
			
			Developers' Perspective ::
			
				Developers are just the Jenkins consumers.
			
			
			DevOps Perspective ::
			
				Administrator - Jenkins
					- Installation and Configuration of Jenkins
					- Plugins Management
					- User Management 
					- Tools Management
					- Credential Management 
					- Security Management 
					- Manangement of Jenkins Master and Slave Nodes
					- Onboarding Applications to DevOps using Jenkins 
					- Create/automate end-to-end CI/CD Pipeline/Project
					- Backup and Recovery
					- Troubleshooting the issues
					
		Installation and Configuration of Jenkins :::
					https://www.jenkins.io/doc/book/installing/
					
					
			1. Launch AWS Instance - Ubuntu VM
			2. 1 vm -- 750 hrs/month 
				10 vms -- 75hrs 
				
				
		Linux Package Managers :::	install/uninstall/update the package
		
			- Ubuntu 		apt or apt-get 
			- Centos/RHEL	yum
			- Fedora 		dnf 
			
		As a root user only we can run the package manager!
		
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Jenkins Installation Steps ::

1. Launch AWS Instance - Ubuntu VM
2. Add port 8080 in security Group  - default port for jenkins

sudo -i 
apt update -y 

# JDK Package Installation ::

sudo apt install fontconfig openjdk-11-jre -y
java -version
		
# Jenkins Installation in Ubuntu ::
		
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y

jenkins --version
systemctl status jenkins 
systemctl stop jenkins 
systemctl start jenkins 
systemctl restart jenkins 
systemctl enable jenkins 


# Jenkins Post installation Activities :::		# default username : admin / pasword : admin
	Unlocked Jenkins 
	Installed Plugins 
	Created Admin user 
		
Summary :::

	What is Jenkins / roles & Responsibilities 
	Install Jenkins 
